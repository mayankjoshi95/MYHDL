###A hardware module (called a block in MyHDL terminology) is modeled as a function that returns generators.
This approach makes it straightforward to support features such as arbitrary hierarchy, named port association, arrays of instances, and conditional instantiation. 
Furthermore, MyHDL provides classes that implement traditional hardware description concepts.
It provides a signal class to support communication between generators, a class to support bit oriented operations, and a class for enumeration types.
Simulation and Verification

The built-in simulator runs on top of the Python interpreter. It supports waveform viewing by tracing signal changes in a VCD file.

With MyHDL, the Python unit test framework can be used on hardware designs. Although unit testing is a popular modern software verification technique, it is still uncommon in the hardware design world.

MyHDL can also be used as hardware verification language for Verilog designs, by co-simulation with traditional HDL simulators.

Conversion to Verilog and VHDL

Subject to some limitations, MyHDL designs can be converted to Verilog or VHDL. This provides a path into a traditional design flow, including synthesis and implementation. The convertible subset is restricted, but much wider than the standard synthesis subset. It includes features that can be used for high level modeling and test benches.

The converter works on an instantiated design that has been fully elaborated. Consequently, the original design structure can be arbitrarily complex. Moreover, the conversion limitations apply only to code inside generators. Outside generators, Python’s full power can be used without compromising convertibility.

Finally, the converter automates a number of tasks that are hard in Verilog or VHDL directly. A notable feature is the automated handling of signed arithmetic issues.

####YIELD STATEMENTS WORK AS GENERAL SENSITIVTY LISTS 
@deco
def func(arg1, arg2, ...):
    <body>
This code is equivalent to the following:

def func(arg1, arg2, ...):
    <body>
func = deco(func)
##Note that the decorator statement goes directly in front of the function declaration, and that the function name func is automatically reused for the final result.
###MyHDL uses decorators to create ready-to-simulate generators from local function definitions.

##def disp():#2since show is not called yet thus it return show and r_sh =show 
    def show():#4.it returns the value "show function" and we get "show ficntion gets printed "
        return "Show Function"
    print("Disp Fucntion")##this print statement is for the outer fucntion
    return show##the outer funciton  return this function
r_sh= disp()##1.it calls to the disp function
print(r_sh())#3.now it is read as show() i.e the show function gets called 
Disp Fucntion
Show Function


def disp(sh):##2, after calling it PRINT the "Disp Funciton"returns the show now r_sh=show 
    print("Disp Function")
    return sh
def show():
    return"Show Function"
r_sh=disp(show)###1. here disp function gets called
print(r_sh())##3.now the show() is called then it print the "Show Function"##A BASIC MYHDL SIMULATION


##myhdl



from myhdl import block,delay,always,now##here we impoert number of object from the python 
@block##in myhdl a hardware module is modeled by a function decorated with block decorator   
def HelloWorld():##parameter list is used to define the inteface of the hardware block 
    @always(delay(10))##always decorator has the dely object as its parameter 
    ##it means fucntion will execute whenever the specified delay has expired 
    def say_hello():##it defines the desired behaviour ##THis is the return of the top HelloWorld
        print("%s Hello World!"%now())##now returns the current simulation time 
    return say_hello    
inst=HelloWorld()#n MyHDL, we create an instance of a hardware block by calling the corresponding function. 
#The block decorator make sure that the return value is actually an instance of a block class, with a useful API.
#In the example, variable inst refers to a HelloWorld block instance.
inst.run_sim(30)##to simulate the instance we use its run_sim method.we can use it to run the simulation for desired amount of 
#timesteps .

##intbv
intbv([val=None] [, min=None]  [, max=None])
#val is the initial value. min and max can be used to constrain the value. Following the Python conventions, min is inclusive, and max is exclusive. 
#Therefore, the allowed value range is min .. max-1.
Python function len can be used to determine the bit width.
len(a)


##We use the bin function provide by MyHDL because it shows the two’s complement representation for negative values.

from myhdl import bin
a=intbv(24)
bin(a)
'11000'

##bit indexing 
from myhdl import bin
a=intbv(24)##it gives us the hexadecimal number 
bin(a)
'11000'
print(int(a[4]))
print(int(a[3]))
print(int(a[2]))
print(int(a[1]))
print(int(a[0]))
1
1
0
0
0

##notice that lower indices corresponds to les significant bit 



##in case of bit slicing higher index is left off i.e the leftmost bit is not considered

print(bin(a[4:1]))
100


print(bin(a[4:]))
1000


##When an intbv object is sliced, a new intbv object is returned.
This new intbv object is always positive, and the value bounds are set up in accordance with the bit width specified by the slice.
For example:

b=a[4:]
print(b.min)
0
print(b.max)
16

##sometimes hardware engineers prefer to constrain an object by defining its bit width directly, instead of the range of allowed values.


##In some cases it can be useful to interpret intbv objects in terms of “signed” and “unsigned”. Basically, it depends on attribute min. 
if min < 0, then the object is “signed”, otherwise it is “unsigned”. 
##In particular, the bit width of a “signed” object will account for a sign bit, but that of an “unsigned” will not, because that would be redundant. 



##to connvert unsigned to signed we use intbv.signed

a = intbv(12,min=0,max=16)
bin(a)
b=a.signed()
print(int(b))
-4


As an example let’s take a 8 bit wide data bus that would be modeled as follows:
###VERY IMPORTANT 
data_bus = intbv(0)[8:]
##Now consider that a complex number is transferred over this data bus. 
##The upper 4 bits of the data bus are used for the real value and the lower 4 bits for the imaginary value. 
##As real and imaginary values have a positive and negative value range, we can slice them off from the data bus and convert them as follows:

##real.next = data_bus[8:4].signed()
##imag.next = data_bus[4:].signed()




##Structural Modeling

##Module Instantiation annd hierarchy 

##in myhdl instances are defined as being either the sequence of the instance or a gennerator .
hierarchy is modeled by defining the instances in a high level fucntionand returning them 

for example  
from myhdl import block

@block
def top(...):
    ...
    instance_1 = module_1(...)
    instance_2 = module_2(...)
    ...
    instance_n = module_n(...)
    ...
    return instance_1, instance_2, ... , instance_n

##conditional instantitation 

##instance if returned according to the parameter whicn=h satisfiies the specific conditon


from myhdl import block

SLOW, MEDIUM, FAST = range(3)

@block
def top(..., speed=SLOW):
    ...
    def slowAndSmall():
       ...
    ...
    def fastAndLarge():
       ...
    if speed == SLOW:
        return slowAndSmall()
    elif speed == FAST:
        return fastAndLarge()
    else:
        raise NotImplementedError



##List of instance and the signal

##cosnider a example of the top moodule which instatiate the single submodule 

from myhdl import block, Signal

@block
def top(...):

    din = Signal(0)
    dout = Signal(0)
    clk = Signal(bool(0))
    reset = Signal(bool(0))

    channel_inst = channel(dout, din, clk, reset)

    return channel_inst



##if we want to support for arbitrary number of channel 

from myhdl import block ,Signal
@block
def top(....,n=8):
  din=[Signal(0) for i in range(n)]
  dout=[Signal(0) for i in range(n)]
  clk=Signal(bool(0))
  reset=Signal (bool(0))
  channel_inst=[None for i in range(n)]
  for i in range(n):
   channel_inst[i]=channel(dout[i],din[i],clk,reset)
  return channel_inst
  
  
  
  ##In myhdl a signal slice can't be used as the signal 
  
  ##we can address such cases by the method called shadow signal 
  
  
  
  ###A digital hardware system model
  
  1.execution block :- threads
  2.the thing connecting them is called signal
  
  ##CHARACTERISTICS
  
  1. MASSSIVE AMOUNT OF CONCURRENT THREADS##COONCURRENCEY :-HAPPENIING AT THE SAME TIME 
  2.COMMUNICATION THROUGH SIGNALS##2THEN ON THE SIGANL VALUE CAHNGES CAN OCCUR WHICH TRIGGER EVENT ON THE THREADS
  3.ACTION TRIGGERED BY EVENT ON SIGNALS
  4.DETERMINISTIC BY CONSTRUCTION
  5.FINE GRAINED CONTROL OF DATA TYPE BIT WIDTHS
  
  
  HDL MMUST SUPPORT THESE CHARACTESITIC
  
  
  ##HDL is the event driven microthread programming language  with built in determinism  
  #an HDL must also implement a hardware friendly type system
  
  
  ##The design of myHDL 
  ##our goal is to design a pyhton library that suport the following features 
  1.microthreads
  2.events that trigger actions
  3.deterministic communication
  4.hardware friendly type system 
  
  
  
  ##DETERMINISM IN AN HDL 
  
  TRICK IS TO HAVE SEPARATE PHASES FOR
  1.VALUE UPDATE
  2.COMPUTATION
  
  
  
  ##that is the leaf object of the determinism
  ##1st CLASS IN myhdl i.e important to know about is the SIGNAL CLASS 
  SIGANL BUFFER THE VALUE 
  s=Signal(0)
  s.next=5##it indicate the next vaue of the signal is 5 ##HERE WE ASSIGN THE NEXT ATTRIBUTE TELLING THE NEXT VALUE OF THE SSIGNAL ISS SAY 5 HERE 
  ##the updates itself is not done by the assigner but automatically by the simulator 
  ##if all comunciation goes through signal then the model ahs to be deterministic and we don't have to worry about it anymore
  
  
  
  #EVENT 
  signal can also be used to define events as we can have amicrothread which is waiting on the value change of the signal or certain trasition rising or -ve edge on a signal 
  ##often there is the globally synchronizing edge tahtt what we call the clock edge
  
  ##other evvent also there waiting for the delay
  
  #MICRO THREADS
  
  1. WE NEED MASSIVE CONCURRENCY 
  2.THE THREADS SHOULD BE SUPER LIGHT WEIGHT 
  3.AS LIGHT WEIGHT AS FUNCTION
  
  
  ##IN MYHDL THE MICROTHREADS ARE IMPLEMENTED BY THE GENERATOR FUNCTION AND GENERATOR 
  
  
  
  ##GENERATORSS ARE KEY BUILDING BLOCK OFF MYHDL MODEL 
  IN myHDL you yield number of signal what that means is you wait untill value changes on these signals thats how we implement waiting on these event 
  ##z ,a,b,sel are signal object (outer scope)
def mux():
    while True:#loop forever
        yield a,b,sel#wait on a value change 
        if sel:
            z.next=a
        else:
            z.next=b
 ##this is agenerator fucntion and a generator is make by calling such a funciton
##but that would be little bit overhead to having to do that all the time THUS WE USE IN MYHDL DECORATORS THAT MAKE IT EASIER TO CREATE GENERATORS
##a decorator is infact a way to modify the behaviour of the function that follows

#@instance decorator creates a  generator from the generator funciton
##@instance what it do it it calls the generator function and assign it to the same name.

@instance ##it is equivalent to mux=mux()  THUS WE REUSE THE NAME OOF THHE FUNCTION AS THE GENERATOR ITSELF 
def mux():
    while True:#loop forever
        yield a,b,sel#wait on a value change 
        if sel:
            z.next=a
        else:
            z.next=b
            
            
##@instance ##it is equivalent to mux=mux()  THUS WE REUSE THE NAME OOF THHE FUNCTION AS THE GENERATOR ITSELF 

def mux():
    while True:##now this is so common we define instead of this a decorator 
        yield a,b,sel#wait on a value change 
        if sel:
            z.next=a
        else:
            z.next=b
#@always decorator abstracts an outer "while true"loop followed by "yield" statement             
@always(a,b,sel) ##meaning of all this is whenever one of these input changes thsi fucntion will be called 
def mux():
     
        if sel:
            z.next=a
        else:
            z.next=b     
            
#Combinatorial logic:@always_comb
##since it is very common that fucntion will be sensitive to all its inputs 
##here we use @always_comb decorator that automaticaly infers which signal are input  here and automatically make the fucntion 
##sensitive to those changes 


@always_comb
def mux():
    if sel:
        z.next=a
    else:
        z.next=b
        
##Sequential logic:@always_seq
##@always_seq this is the decorator that automatically infers the reset fucntionality 
##here when we have the reset signal and you use this decorator then the hardware reset signal will automatically be called just because this decorator ifers all this behaviour
@always(clock.posedge,reset.negedge)
   def dff():
        if reset==0:
            q.next=0#initial value  of q
        else:
            q.next=d
##instead of this we can write
#if reset==0:
 #           q.next=0#initial value  of q
  #      else:
reset=ResetSignal(0,active=0,async=True)
@always_seq(clock.posedge,reset=reset)
def dff():
    q.next=d
    
##DECORATORS ARE MAIN TOOL TO CREATE A DOMAIN -SPECIFIC LANGUAGE
#@instance:-most general,multiple yield,statements
#@always:-single yield statement,abstract"while True"Loop
#@always_comb:-automaticaly infers combanitorial sensitivity 
#@always_seq:-automatically infers the reset fucntionality for sequential logic 
##A UNIQUE FEATURE OF THE MYHDL

  ##MyHDL is minimalistic design
  
  ##here only features that are neccessary are implemented 
  ##here we used native python features as much as possible 
  ##list for random access memory(RAM)
 ##Tuple for read only memory(ROM)
 ##these  have the similar semantic meaning
 ##for the hardware module itself there nothing special in myHDL hardware module is modeled by a function that returns the generators
 ## To describe the hardware module a normal funcition is required the only difference is that it creates generators and it returns them
 #TO MODEL HIERARCHY CALL ANOTHER FUCNTION AND NO SPECIAL FEATURE ARE NEEDED FOR THAT
 ##THE HIERARCHY IS MODLED BY A "SUBMODULE CALL"
  
  
  #MODELING HIERARCHY 
  
  def module(out1,...,in2,...clock,reset):##1.this thhe normal fucntion with some parameter list typically all signals 
    sig1=Signal()#2.then we ahve internal signal
    inst1=submodule(...)##3.here we ahve the submodule which is just another ffucnton call which is assigned to the variable it is called instantiiation in hardware design 
    ##4.then we can have any number of additinal instatiation or decorator 
    @always_seq(clock.posedge,reset=reset)
    def gen1():
    @always_comb():
      def gen2():
      return inst1,...gen1,...gen2#5. all these things are returned 
  
  
  ##it creates a nested hierarchical list of the genreators
  ##THIS IS THE BASIC DATA STRUCTURE OF HOW MYHDL DEALS WITH THE HARDWARE DESIGN AS A NESTED LIST OF THE GENERTORS 
  
  
  
  ##HARDWARE FRIENDLY TYPE SYSTEM 
  
  ##BASED ON INTEGER ARTHIMETIC ##FOR EFFICCINCY REASIN THAT IS THE BASIS OF EVERYTHING 
  ##ALSO THERE IS FINE GRAINED CONTROL OF BIT WIDTH,BECAUSE OF WE DONDOT WANT TO WASTE OUR SIZE, FOR EFFICIENCY 
  
  
  ##
  reg[2:0] a;
  reg signed [3:0] b;
  reg signed [4:0] c;
  c<= a+b;
  
  ANSWER
  7+-2=-11
  
  
  THE VHDL ANSWER 
  
  signal a :unsigned (2 downto 0);
  signal b :unsigned (3 downto 0);
  signal c :unsigned (4 downto 0);
  
  c<=a+b
   COMPILATION ERROR
   
   
   
   
##THE PROBLEM WITH INTEGER ARTHIMETIC IN VERILOG AND VHDL IS 
#1.THEY BOTH USE LOWER LEVEL TYPES I.E THE NON ABSTRACT TYPES:
#SIGNED OR UNSIGNED 
#IN BOTH CASES MIXING THOSE EXPRESSION IS PROBLEMATIC
3.VERILOG CASTS EVERYHTING TO UNSIGNED
4.VHDL STORNG TYPING DOESNOT WORK WELL WITH THESE KIND OF LOW LEVEL TYPES  



INTEGER ARITHMETIC  IN MYHDL 

#THE  PYHTON WAY WAS THE GOOD OLD INTEEGER 
##BUT IN MYHDL THERE IS A SPECIAL CLASS CALLED intbv where we can also constraints the value of the integer to  the range.
##intbv is theinteger class with bit vector capablities
a=intbv(0,min=0,max=-8)
b=intbv(0,min=-8,max=-8)
##infact such range gives you the free assertions i.e it tells you where the error is 
##in the same time these bounds can be used to specify what bitwidth you need 

##also to access the bits we need slicing and indexing interface to access the bits 
z.next=a[2:0]


SIDENOTE SYNTHESIS
1.A Synthesis tool is the compiler 
2.it compiles an HDL hardware  model into  agate level implementation
3..synthesis is very secific in a way that you have to write your HDL in a specific way for it to be passed through the synthesizer i.e fairly lw level and that level is  

 ##conversion connecting to standard design flow 
 1.a subset of myhdl can be automatically converted to verilog /VHDL 
 2.converter maintains the abstraction level 
 3.however it support some unique myHDL  feature and automates some tedious tasks
 4.creates readable VHDL/Verilog that integrates seamlessly  in the design flow 
 5.the convertible subset ismuch broader than the synthesizable subset 
 
 
 
 ##myHDL verification  is by far the hardest task in the hardware design 
 ##with myHDL hardware verificaiton engineer benefit from pyhton expressive power and ecosystem 
 ##TTD TEST DRIVEN DESIGN FOR HARDWARE 
 ##THE FOUNDATION IS AN EVENT DRIVEN SIMULATOR PROVIDED BY MYHDL 
 ##WITH MYHDL FOR HARDDWARE VERIFIFCATION YOU HAVE NO LIMIT AT ALL YOU CAN USE ANY TRICK IN THE PYTHON BOOK TO BUILD YOUR VERIFICATION ENVIRONMENT 
 
 
 ##myhdl simulator 
 
 1.input is hierarchical list of generators,that communicate through these signal. 
 2.the simulator of data signal values based on those values it check which generators becomes active 
 3.then it run these generator in any order 
 
 SIMULATION DEBUGGING 
 
 1.CLASSICAL PYTHON DEBUGGING
 2.WAVEFORM VIEWER OUTPUT 
 
 PYPY AND MYHDL THE DREAM TEAM 
 
 #it is diffeerent python interpreter
 #it has JIT(just in time ) technology so it speeds up your running program 
 ##bench mark simulation runs 8 -20 time 
 
 
 ##COMPUTER ORGANIZATION
 
 1.CPU
2.MEMORY HIERARCHY(PHYSICAL MEMORY (RAM),CACHE 1.LEVEL1,2.LEVEL2,3.LEVEL3)
IO(VIRTUAL MEMORY) ,CPU(REGISTERS)
3.IO SYSTEM

CPU  has
1.pipelining
2.hyperthreading
3.multi core
4.complex io

CPU has this ALU 
Now hardware 
1.fetch instruction
2.load 
3.execute (here we present data and instruciton to the alu)
4.store data 


##NOW how the programmable hardware iss different 

##FOR CPU side we are going to use more time and less logic and more memory



##SPACE 
sum of product in hardware 
we put many multiplier and many addders we have limits on resources 

#so programmable hardware is usually for digtial programmable hardware and field progemmable gate array

##here we have the programmablelogic block that we can program in this block and we can program routing i.e whats connected to what it means that we can take the multiplier route it
##to the adder and then to the multiplier 
##space more logic less time

###ports are going to be signal and parameter will tell how our signal is going to work 


##UART serial communication protocol 
UNIVERSAL ASYNCHRONOUS RECEIVER /TRANSMITTER

nowadays instead of this serial communication we use ethernet or usb cable

##myhdlpeek lets you monitor signals in a MyHDL or nMigen digital system simulation and display them as waveforms or as tables in a Jupyter notebook.

##myhdlpeek implements a Peeker object that monitors a signal and records the time and value when it changes. 
##You can also select which signals are shown, set the beginning and ending times of the display, 
##find portions of the waveforms where user-specified triggers occur, and much more.

